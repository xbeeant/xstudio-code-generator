package com.xstudio.mybatis.po;

import org.mybatis.generator.config.DomainObjectRenamingRule;
import org.mybatis.generator.config.IgnoredColumn;

import java.io.Serializable;
import java.util.List;

/**
 * @author xiaobiao
 * @version 2020/10/3
 */
public class TableProperty implements Serializable {
    private static final long serialVersionUID = 6059035978911082333L;
    /**
     * The name of the database table (not including the schema or catalog). The specified value can contain SQL
     * wildcards if so desired.
     */
    private String tableName;
    /**
     * The database schema - not required if your database does not use schemas, or if there is a default schema. The
     * specified value can contain SQL wildcards if so desired.
     */
    private String schema;

    /**
     * The database catalog - not required if your database does not use catalogs, or if there is a default catalog.
     */
    private String catalog;
    /**
     * This attribute is ignored is the target runtime is "MyBatis3DynamicSql" or "MyBatis3Kotlin"
     * If specified, this value will be used to alias the table and all column names in any generated SQL select statement.
     * Column names will be aliased with the pattern alias_actualColumnName.
     */
    private String alias;
    /**
     * The base name from which generated object names will be generated. If not specified, MBG will generate a name
     * automatically based on the tableName. The name (either specified here, or generated automatically) will be used to
     * compute generated domain class names and DAO class names.
     * You can specify a package fragment in the domain object name. For example, if you specify foo.Bar then the domain
     * object will be Bar and package foo will be appended to the target package specified in the generator configurations.
     */
    private String domainObjectName;


    private Boolean enableInsert = true;
    private Boolean enableSelectByPrimaryKey = true;
    private Boolean enableSelectByExample = true;
    private Boolean enableUpdateByPrimaryKey = true;
    private Boolean enableDeleteByPrimaryKey = true;
    private Boolean enableDeleteByExample = true;
    private Boolean enableCountByExample = true;
    private Boolean enableUpdateByExample = true;

    /**
     * This attribute is ignored is the target runtime is "MyBatis3DynamicSql" or "MyBatis3Kotlin"
     * This value will be added to the select list of the select by primary key statement in this form: "'&lt;value&gt;' as
     * QUERYID". This can be useful for identifying queries in DBA tracing tools at run time. If you use thus value,
     * you should specify a unique id for every different query generated by MBG.
     */
    private String selectByPrimaryKeyQueryId;
    /**
     * This attribute is ignored is the target runtime is "MyBatis3DynamicSql" or "MyBatis3Kotlin"
     * This value will be added to the select list of the select by example statement in this form: "'&lt;value&gt;' as
     * QUERYID". This can be useful for identifying queries in DBA tracing tools at run time. If you use thus value, you
     * should specify a unique id for every different query generated by MBG.
     */
    private String selectByExampleQueryId;
    /**
     * This attribute is ignored is the target runtime is "MyBatis3DynamicSql" or "MyBatis3Kotlin"
     * This attribute is used to override the default model type if you desire to do so for this table. If not specified,
     * MBG will generate domain objects based on the context default model type. The model type defines how MBG will
     * generate domain classes. With some model types MBG will generate a single domain class for each table, with others
     * MBG may generate different classes depending on the structure of the table. The property supports these values:
     *
     * conditional: This model is similar to the hierarchical model except that a separate class will not be generated
     * if that separate class would only contain one field. So if a table has only one primary key field, that field will
     * be merged into the base record class.
     *
     * flat: This model generates only one domain class for any table. The class will hold all fields in the table.
     *
     * hierarchical: This model will generate a primary key class if the table has a primary key, another class that holds
     * any BLOB columns in the table, and another class that holds the remaining fields. There is an appropriate inheritance
     * relationship between the classes.
     */
    private Boolean modelType;

    private String sqlProviderName;

    private DomainObjectRenamingRule renamingRule;

    private List<IgnoredColumn> ignoredColumns;

    private boolean useActualColumnNames = false;

    public String getTableName() {
        return tableName;
    }

    public void setTableName(String tableName) {
        this.tableName = tableName;
    }

    public String getSchema() {
        return schema;
    }

    public void setSchema(String schema) {
        this.schema = schema;
    }

    public String getCatalog() {
        return catalog;
    }

    public void setCatalog(String catalog) {
        this.catalog = catalog;
    }

    public String getAlias() {
        return alias;
    }

    public void setAlias(String alias) {
        this.alias = alias;
    }

    public String getDomainObjectName() {
        return domainObjectName;
    }

    public void setDomainObjectName(String domainObjectName) {
        this.domainObjectName = domainObjectName;
    }

    public Boolean getEnableInsert() {
        return enableInsert;
    }

    public void setEnableInsert(Boolean enableInsert) {
        this.enableInsert = enableInsert;
    }

    public Boolean getEnableSelectByPrimaryKey() {
        return enableSelectByPrimaryKey;
    }

    public void setEnableSelectByPrimaryKey(Boolean enableSelectByPrimaryKey) {
        this.enableSelectByPrimaryKey = enableSelectByPrimaryKey;
    }

    public Boolean getEnableSelectByExample() {
        return enableSelectByExample;
    }

    public void setEnableSelectByExample(Boolean enableSelectByExample) {
        this.enableSelectByExample = enableSelectByExample;
    }

    public Boolean getEnableUpdateByPrimaryKey() {
        return enableUpdateByPrimaryKey;
    }

    public void setEnableUpdateByPrimaryKey(Boolean enableUpdateByPrimaryKey) {
        this.enableUpdateByPrimaryKey = enableUpdateByPrimaryKey;
    }

    public Boolean getEnableDeleteByPrimaryKey() {
        return enableDeleteByPrimaryKey;
    }

    public void setEnableDeleteByPrimaryKey(Boolean enableDeleteByPrimaryKey) {
        this.enableDeleteByPrimaryKey = enableDeleteByPrimaryKey;
    }

    public Boolean getEnableDeleteByExample() {
        return enableDeleteByExample;
    }

    public void setEnableDeleteByExample(Boolean enableDeleteByExample) {
        this.enableDeleteByExample = enableDeleteByExample;
    }

    public Boolean getEnableCountByExample() {
        return enableCountByExample;
    }

    public void setEnableCountByExample(Boolean enableCountByExample) {
        this.enableCountByExample = enableCountByExample;
    }

    public Boolean getEnableUpdateByExample() {
        return enableUpdateByExample;
    }

    public void setEnableUpdateByExample(Boolean enableUpdateByExample) {
        this.enableUpdateByExample = enableUpdateByExample;
    }

    public String getSelectByPrimaryKeyQueryId() {
        return selectByPrimaryKeyQueryId;
    }

    public void setSelectByPrimaryKeyQueryId(String selectByPrimaryKeyQueryId) {
        this.selectByPrimaryKeyQueryId = selectByPrimaryKeyQueryId;
    }

    public String getSelectByExampleQueryId() {
        return selectByExampleQueryId;
    }

    public void setSelectByExampleQueryId(String selectByExampleQueryId) {
        this.selectByExampleQueryId = selectByExampleQueryId;
    }

    public Boolean getModelType() {
        return modelType;
    }

    public void setModelType(Boolean modelType) {
        this.modelType = modelType;
    }

    public String getSqlProviderName() {
        return sqlProviderName;
    }

    public void setSqlProviderName(String sqlProviderName) {
        this.sqlProviderName = sqlProviderName;
    }

    public DomainObjectRenamingRule getRenamingRule() {
        return renamingRule;
    }

    public void setRenamingRule(DomainObjectRenamingRule renamingRule) {
        this.renamingRule = renamingRule;
    }

    public List<IgnoredColumn> getIgnoredColumns() {
        return ignoredColumns;
    }

    public void setIgnoredColumns(List<IgnoredColumn> ignoredColumns) {
        this.ignoredColumns = ignoredColumns;
    }

    public boolean isUseActualColumnNames() {
        return useActualColumnNames;
    }

    public void setUseActualColumnNames(boolean useActualColumnNames) {
        this.useActualColumnNames = useActualColumnNames;
    }
}
